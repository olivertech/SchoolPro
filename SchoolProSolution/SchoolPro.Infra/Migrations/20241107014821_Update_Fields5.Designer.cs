// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SchoolPro.Infra.Context;

#nullable disable

namespace SchoolPro.Infra.Migrations
{
    [DbContext(typeof(SchoolProDbContext))]
    [Migration("20241107014821_Update_Fields5")]
    partial class Update_Fields5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SchoolPro.Core.Entities.AccessToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<DateOnly?>("ExpiringAt")
                        .IsRequired()
                        .HasColumnType("date")
                        .HasColumnName("expiring_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<TimeOnly?>("TimedAt")
                        .IsRequired()
                        .HasColumnType("time without time zone")
                        .HasColumnName("timed_at");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Access_Token", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientSecretKey")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("client_secret_key");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("ResponsableCellPhone1")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("responsable_cellphone_1");

                    b.Property<string>("ResponsableCellPhone2")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("responsable_cellphone_2");

                    b.Property<string>("ResponsableEmail")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("responsable_email");

                    b.Property<string>("ResponsableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("responsable_name");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Client", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9cf0bfd2-3d70-11ef-a3ab-0242ac1c0002"),
                            ClientSecretKey = "iaxqRaCHDNR5KZrriHVq59U96PedeKTm",
                            CreatedAt = new DateOnly(2024, 11, 6),
                            Description = "Rede de Ensino 123 de Oliveira 4",
                            IsActive = true,
                            Name = "Rede de Ensino 123 de Oliveira 4",
                            ResponsableCellPhone1 = "(11) 11111-1111",
                            ResponsableCellPhone2 = "(22) 22222-2222",
                            ResponsableEmail = "joao.silva@123deoliveira4.com",
                            ResponsableName = "João da Silva"
                        });
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("address_line_2");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("cellphone");

                    b.Property<string>("City")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("city");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("Facebook")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("facebook");

                    b.Property<string>("Github")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("github");

                    b.Property<string>("Instagram")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("instagram");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LinkedIn")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("linkedin");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("neighborhood");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("postal_code");

                    b.Property<string>("State")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("state");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("street_address");

                    b.Property<string>("Telephone")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("telephone");

                    b.Property<string>("Twitter")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("twitter");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<Guid?>("DocumentTypeId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("document_type_id");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("file_path");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("SchoolEnrollmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("school_enrollment_id");

                    b.Property<Guid?>("SchoolFeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("school_fee_id");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnType("uuid")
                        .HasColumnName("school_id");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SchoolEnrollmentId");

                    b.HasIndex("SchoolFeeId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Document", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.DocumentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Icone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("icone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Document_Type", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("MenuEndPoint")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("menu_endpoint");

                    b.Property<string>("MenuIcon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("menu_icon");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("menu_name");

                    b.Property<string>("MenuTip")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("menu_tip");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Feature", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.FeatureRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("FeatureId")
                        .HasColumnType("uuid")
                        .HasColumnName("feature_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("RoleId");

                    b.ToTable("Feature_Role", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.FeeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Fee_Type", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.Parent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly?>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Kinship")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("kinship");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Parent", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("45533ff6-3ba5-11ef-9476-0242ac130002"),
                            ClientSchoolKey = "iaxqRaCHDNR5KZrriHVq59U96PedeKTm.HejGkZngN6A2JzLQ2g5luuye8qSzhmg5",
                            CreatedAt = new DateOnly(2024, 11, 6),
                            Description = "Perfil de Administrador",
                            IsActive = true,
                            Name = "Administrador"
                        });
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("SchoolId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("school_id");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Room", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("cnpj");

                    b.Property<Guid?>("ClientId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<string>("CountyRegistration")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("count_registration");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsBranch")
                        .HasColumnType("boolean")
                        .HasColumnName("is_branch");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("SchoolSecretKey")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("school_secret_key");

                    b.Property<string>("StateRegistration")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("state_registration");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContactId");

                    b.ToTable("School", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9cf0bfd2-3d70-11ef-a3ab-0242ac1c0002"),
                            CNPJ = "12345678000199",
                            ClientId = new Guid("9cf0bfd2-3d70-11ef-a3ab-0242ac1c0002"),
                            CreatedAt = new DateOnly(2024, 11, 6),
                            Description = "Matriz da Rede de Ensino 123 de Oliveira 4",
                            IsActive = true,
                            IsBranch = false,
                            Name = "Matriz da Rede de Ensino 123 de Oliveira 4",
                            SchoolSecretKey = "HejGkZngN6A2JzLQ2g5luuye8qSzhmg5"
                        });
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.SchoolCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("room_id");

                    b.Property<Guid?>("SchoolSubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("school_subject_id");

                    b.Property<Guid?>("SchoolYearId")
                        .HasColumnType("uuid")
                        .HasColumnName("school_year_id");

                    b.Property<TimeOnly>("TimeFrom")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_from");

                    b.Property<TimeOnly>("TimeTo")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_to");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("SchoolSubjectId");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("School_Calendar", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.SchoolEnrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean")
                        .HasColumnName("approved");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Enrollment")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("enrollment");

                    b.Property<string>("FinalGrade")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("final_grade");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<Guid?>("SchoolYearId")
                        .HasColumnType("uuid")
                        .HasColumnName("school_year_id");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("SchoolYearId");

                    b.HasIndex("StudentId");

                    b.ToTable("School_Enrollment", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.SchoolFee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<Guid?>("FeeTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("fee_type_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateOnly>("PaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("payment_date");

                    b.Property<Guid?>("SchoolEnrollmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("StatusFee")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status_fee");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("FeeTypeId");

                    b.ToTable("School_Fee", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.SchoolSubject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("School_Subject", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.SchoolYear", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Billing")
                        .HasColumnType("numeric")
                        .HasColumnName("billing");

                    b.Property<decimal>("Budget")
                        .HasColumnType("numeric")
                        .HasColumnName("budget");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.ToTable("School_Year", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly?>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("description");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("StudentClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_class_id");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("StudentClassId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.StudentClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("RoomId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("room_id");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Student_Class", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.StudentGrade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("DateGrade")
                        .HasColumnType("date")
                        .HasColumnName("date_grade");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("Grade")
                        .HasColumnType("numeric")
                        .HasColumnName("grade");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<decimal>("MinimalGrade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(5m)
                        .HasColumnName("minimal_grade");

                    b.Property<Guid?>("SchoolEnrollmentId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("school_enrollment_id");

                    b.Property<Guid?>("SchoolSubjectId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("school_subject_id");

                    b.Property<Guid?>("StudentClassId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("student_class_id");

                    b.Property<Guid?>("StudentId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("SchoolEnrollmentId");

                    b.HasIndex("SchoolSubjectId");

                    b.HasIndex("StudentClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("Student_Grade", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.StudentParent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Student_Parent", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.SystemLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Json")
                        .HasColumnType("jsonb")
                        .HasColumnName("json");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<TimeOnly?>("TimedAt")
                        .IsRequired()
                        .HasColumnType("time without time zone")
                        .HasColumnName("timed_at");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("System_Log", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly?>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Teacher", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.TeacherSchoolSubject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientSchoolKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_school_key");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<Guid?>("SchoolSubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("school_subject_id");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_id");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("SchoolSubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Teacher_School_Subject", (string)null);
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccessTokenId")
                        .HasColumnType("uuid")
                        .HasColumnName("access_token_id");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DeletedAt")
                        .HasColumnType("date")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("document");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PicturePath")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("picture_path");

                    b.Property<Guid?>("RoleId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid")
                        .HasColumnName("school_id");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AccessTokenId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SchoolId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a150059-614b-47c3-b56f-59deededd8d6"),
                            CreatedAt = new DateOnly(2024, 11, 6),
                            Document = "02188285786",
                            Email = "marcelo@schoolpro.com",
                            IsActive = true,
                            Name = "Marcelo de Oliveira",
                            Password = "123",
                            RoleId = new Guid("45533ff6-3ba5-11ef-9476-0242ac130002"),
                            SchoolId = new Guid("9cf0bfd2-3d70-11ef-a3ab-0242ac1c0002")
                        });
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.Document", b =>
                {
                    b.HasOne("SchoolPro.Core.Entities.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolPro.Core.Entities.Parent", "Parent")
                        .WithMany("Documents")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("parent_Id");

                    b.HasOne("SchoolPro.Core.Entities.SchoolEnrollment", "SchoolEnrollment")
                        .WithMany()
                        .HasForeignKey("SchoolEnrollmentId");

                    b.HasOne("SchoolPro.Core.Entities.SchoolFee", "SchoolFee")
                        .WithMany()
                        .HasForeignKey("SchoolFeeId");

                    b.HasOne("SchoolPro.Core.Entities.School", "School")
                        .WithMany("Documents")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("school_Id");

                    b.HasOne("SchoolPro.Core.Entities.Student", "Student")
                        .WithMany("Documents")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("student_Id");

                    b.HasOne("SchoolPro.Core.Entities.Teacher", "Teacher")
                        .WithMany("Documents")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("teacher_Id");

                    b.Navigation("DocumentType");

                    b.Navigation("Parent");

                    b.Navigation("School");

                    b.Navigation("SchoolEnrollment");

                    b.Navigation("SchoolFee");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.FeatureRole", b =>
                {
                    b.HasOne("SchoolPro.Core.Entities.Feature", "Feature")
                        .WithMany("FeaturesRole")
                        .HasForeignKey("FeatureId")
                        .HasConstraintName("feature_id");

                    b.HasOne("SchoolPro.Core.Entities.Role", "Role")
                        .WithMany("FeaturesRole")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("role_id");

                    b.Navigation("Feature");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.Parent", b =>
                {
                    b.HasOne("SchoolPro.Core.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.Room", b =>
                {
                    b.HasOne("SchoolPro.Core.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.School", b =>
                {
                    b.HasOne("SchoolPro.Core.Entities.Client", "Client")
                        .WithMany("Schools")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolPro.Core.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.Navigation("Client");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.SchoolCalendar", b =>
                {
                    b.HasOne("SchoolPro.Core.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("SchoolPro.Core.Entities.SchoolSubject", "SchoolSubject")
                        .WithMany()
                        .HasForeignKey("SchoolSubjectId");

                    b.HasOne("SchoolPro.Core.Entities.SchoolYear", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearId");

                    b.Navigation("Room");

                    b.Navigation("SchoolSubject");

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.SchoolEnrollment", b =>
                {
                    b.HasOne("SchoolPro.Core.Entities.SchoolYear", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearId");

                    b.HasOne("SchoolPro.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("SchoolYear");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.SchoolFee", b =>
                {
                    b.HasOne("SchoolPro.Core.Entities.FeeType", "FeeType")
                        .WithMany()
                        .HasForeignKey("FeeTypeId");

                    b.Navigation("FeeType");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.Student", b =>
                {
                    b.HasOne("SchoolPro.Core.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("SchoolPro.Core.Entities.StudentClass", "StudentClass")
                        .WithMany("Students")
                        .HasForeignKey("StudentClassId")
                        .HasConstraintName("student_class_Id");

                    b.Navigation("Contact");

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.StudentClass", b =>
                {
                    b.HasOne("SchoolPro.Core.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.StudentGrade", b =>
                {
                    b.HasOne("SchoolPro.Core.Entities.SchoolEnrollment", "SchoolEnrollment")
                        .WithMany()
                        .HasForeignKey("SchoolEnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolPro.Core.Entities.SchoolSubject", "SchoolSubject")
                        .WithMany()
                        .HasForeignKey("SchoolSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolPro.Core.Entities.StudentClass", "StudentClass")
                        .WithMany()
                        .HasForeignKey("StudentClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolPro.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolEnrollment");

                    b.Navigation("SchoolSubject");

                    b.Navigation("Student");

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.StudentParent", b =>
                {
                    b.HasOne("SchoolPro.Core.Entities.Parent", "Parent")
                        .WithMany("StudentParents")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("parent_id");

                    b.HasOne("SchoolPro.Core.Entities.Student", "Student")
                        .WithMany("StudentParents")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("student_id");

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.SystemLog", b =>
                {
                    b.HasOne("SchoolPro.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.Teacher", b =>
                {
                    b.HasOne("SchoolPro.Core.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.TeacherSchoolSubject", b =>
                {
                    b.HasOne("SchoolPro.Core.Entities.SchoolSubject", "SchoolSubject")
                        .WithMany("TeacherSchoolSubjects")
                        .HasForeignKey("SchoolSubjectId")
                        .HasConstraintName("school_subject_Id");

                    b.HasOne("SchoolPro.Core.Entities.Teacher", "Teacher")
                        .WithMany("TeacherSchoolSubjects")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("teacher_Id");

                    b.Navigation("SchoolSubject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.User", b =>
                {
                    b.HasOne("SchoolPro.Core.Entities.AccessToken", "AccessToken")
                        .WithMany()
                        .HasForeignKey("AccessTokenId");

                    b.HasOne("SchoolPro.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolPro.Core.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessToken");

                    b.Navigation("Role");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.Client", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.Feature", b =>
                {
                    b.Navigation("FeaturesRole");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.Parent", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("StudentParents");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.Role", b =>
                {
                    b.Navigation("FeaturesRole");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.School", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.SchoolSubject", b =>
                {
                    b.Navigation("TeacherSchoolSubjects");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.Student", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("StudentParents");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.StudentClass", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolPro.Core.Entities.Teacher", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("TeacherSchoolSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
